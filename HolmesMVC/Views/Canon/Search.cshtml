@using System.Xml;
@using System.Text.RegularExpressions;

@functions{
    /// <summary>
    /// Wraps matched strings in HTML span elements styled with a background-color
    /// Credit to Mike Brind at mikesdotnetting.com
    /// </summary>
    /// <param name="text"></param>
    /// <param name="keywords">Comma-separated list of strings to be highlighted</param>
    /// <param name="cssColor">The Css color to apply</param>
    /// <returns>string</returns>
    public string HighlightKeyWords(string text, string keywords, string cssColor)
    {
        if (text == String.Empty || keywords == String.Empty || cssColor == String.Empty)
            return text;
        var words = keywords.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
        return words.Select(word => word.Trim()).Aggregate(text,
                     (current, pattern) =>
                     Regex.Replace(current,
                                     pattern,
                                       string.Format("<span style=\"background-color:{0}\">{1}</span>",
                                       cssColor,
                                       "$0"),
                                       RegexOptions.IgnoreCase));

    }
    
    public string ExcerptText(string text) 
    {
        int locationOfFirstKeyword = text.IndexOf('<');
        if (locationOfFirstKeyword > 30) {
            text = "..." + text.Substring(locationOfFirstKeyword - 30, text.Length - (locationOfFirstKeyword - 30));
        }

        string reverseText = new string(text.Reverse().ToArray());
        int locationOfLastKeyword = text.Length - reverseText.IndexOf('>');
        if (text.Length > locationOfLastKeyword + 30) {
            text = text.Substring(0, locationOfLastKeyword + 30) + "...";
        }
        
        return text;
    }
}


@model HolmesMVC.Models.ViewModels.CanonSearchView

@if (Model.Query.IndexOf('"') > -1) {
<h2 class="detailscategory">Search for @Model.Query</h2>
} else {
<h2 class="detailscategory">Search for '@Model.Query'</h2>
}

<br /><br />

@{
    HolmesMVC.Models.Story previousStory = null;
}
@foreach (var node in Model.Nodes.OrderBy(n => n.Story.ID))
{
    if (previousStory != null && node.Story.ID != previousStory.ID)
    {
        <text>-- </text>@Html.ActionLink(previousStory.Name, "Details", "Story", new { id = previousStory.ID }, null)<br /><br /><br />
    }
    
    string highlightedSnippet;
    
    if (Model.Query.IndexOf('"') > -1) {
        highlightedSnippet = HighlightKeyWords(node.Snippet, Model.Query.Replace("\"", String.Empty), "yellow");
    }
    else
    {
        highlightedSnippet = HighlightKeyWords(node.Snippet, Model.Query.Replace(' ', ','), "yellow");
    }
    
    @Html.Raw(ExcerptText(highlightedSnippet))<br /><br />
    
    previousStory = node.Story;
        
}
    @if (previousStory != null)
    {
        <text>-- </text>@Html.ActionLink(previousStory.Name, "Details", "Story", new { id = previousStory.ID }, null)<br /><br /><br />
    }