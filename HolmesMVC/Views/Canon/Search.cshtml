@using System.Xml;
@using System.Text.RegularExpressions;


@* credit to mikesdotnetting.com for the highlighting function *@
@functions{
    /// <summary>
    /// Wraps matched strings in HTML span elements styled with a background-color
    /// </summary>
    /// <param name="text"></param>
    /// <param name="keywords">Comma-separated list of strings to be highlighted</param>
    /// <param name="cssColor">The Css color to apply</param>
    /// <returns>string</returns>
    public string HighlightKeyWords(string text, string keywords, string cssColor)
    {
        if (text == String.Empty || keywords == String.Empty || cssColor == String.Empty)
            return text;
        var words = keywords.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
        return words.Select(word => word.Trim()).Aggregate(text,
                     (current, pattern) =>
                     Regex.Replace(current,
                                     pattern,
                                       string.Format("<span style=\"background-color:{0}\">{1}</span>",
                                       cssColor,
                                       "$0"),
                                       RegexOptions.IgnoreCase));

    }
}


@model HolmesMVC.Models.ViewModels.CanonSearchView

@if (Model.Query.IndexOf('"') > -1) {
<h2 class="detailscategory">Search for @Model.Query</h2>
} else {
<h2 class="detailscategory">Search for '@Model.Query'</h2>
}

@foreach (var node in Model.Nodes)
{
    if (Model.Query.IndexOf('"') > -1) {
    <text>...</text>@Html.Raw(HighlightKeyWords(node.Snippet,Model.Query.Replace("\"",String.Empty),"yellow"))<text>...</text><br /><br />
    } else {
    <text>...</text>@Html.Raw(HighlightKeyWords(node.Snippet,Model.Query.Replace(' ',','),"yellow"))<text>...</text><br /><br />
    }
}