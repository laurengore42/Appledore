@using System.Xml;
@using System.Text.RegularExpressions;

@functions{
    /// <summary>
    /// Wraps matched strings in HTML span elements styled with a background-color
    /// Credit to Mike Brind at mikesdotnetting.com
    /// </summary>
    /// <param name="text"></param>
    /// <param name="keywords">Comma-separated list of strings to be highlighted</param>
    /// <param name="cssColor">The Css color to apply</param>
    /// <returns>string</returns>
    public string HighlightKeyWords(string text, string keywords, string cssColor)
    {
        if (text == String.Empty || keywords == String.Empty || cssColor == String.Empty)
            return text;
        var words = keywords.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
        return words.Select(word => word.Trim()).Aggregate(text,
                     (current, pattern) =>
                     Regex.Replace(current,
                                     pattern,
                                       string.Format("<span style=\"background-color:{0}\">{1}</span>",
                                       cssColor,
                                       "$0"),
                                       RegexOptions.IgnoreCase));

    }

    private string TrimEndToWord(string text)
    {
        var rT = new string(text.Reverse().ToArray());
        rT = TrimStartToWord(rT);
        text = new string(rT.Reverse().ToArray());
        return text;
    }

    private string TrimStartToWord(string text)
    {
        List<char> terminatorCharacters = new List<char>();
        terminatorCharacters.Add('<');
        terminatorCharacters.Add('>');
        terminatorCharacters.Add('!');
        terminatorCharacters.Add(',');
        terminatorCharacters.Add('.');
        terminatorCharacters.Add('?');
        terminatorCharacters.Add(':');
        terminatorCharacters.Add(';');
        terminatorCharacters.Add('"');
        terminatorCharacters.Add('\'');
        terminatorCharacters.Add('-');

        foreach (char c in terminatorCharacters)
        {
            if (text.IndexOf(c) == 0)
            {
                return text;
            }
        }

        if (text.IndexOf(" ") != 0)
        {
            text = text.Substring(text.IndexOf(' ') + 1, text.Length - (text.IndexOf(' ') + 1));
        }
        else if (text.IndexOf(" ") == 0)
        {
            text = text.Substring(1, text.Length - 1);
        }
        return text;
    }

    private string ExcerptText(string text, int bufferSize, string highlightColour)
    {
        string startPattern = "<span style=\"background-color:" + highlightColour + "\">";
        string endPattern = "</span>";

        if (text.Split('/').Count() > 2)
        {
            // More than one keyword in the excerpt
            // Cut out extraneous text between the keywords

            string excerptingPattern = endPattern + "(.{0," + bufferSize + "})(.{" + bufferSize * 2 + ",9999}?)(.{0," + bufferSize + "})" + startPattern;
            text = Regex.Replace(text, excerptingPattern, endPattern + "$1" + "|" + "$3" + startPattern);

            // Trim the raw edges of the cuts to nearest word-ending

            String[] textArray = text.Split('|');

            textArray[0] = TrimEndToWord(textArray[0]);
            for (var i = 0; i < textArray.Length - 1; i++)
            {
                textArray[i] = TrimStartToWord(textArray[i]);
                textArray[i] = TrimEndToWord(textArray[i]);
            }
            textArray[textArray.Length - 1] = TrimStartToWord(textArray[textArray.Length - 1]);

            text = string.Join("<br /><br />", textArray);
        }

        // Trim ends down to within proximity of the keywords

        int startOfKeyword = text.IndexOf(startPattern);
        if (startOfKeyword > bufferSize)
        {
            text = text.Substring(startOfKeyword - bufferSize, text.Length - (startOfKeyword - bufferSize));
        }

        string reverseText = new string(text.Reverse().ToArray());
        endPattern = new string(endPattern.Reverse().ToArray());
        int endOfKeyword = text.Length - (reverseText.IndexOf(endPattern));
        if (text.Length > endOfKeyword + bufferSize)
        {
            text = text.Substring(0, endOfKeyword + bufferSize);
        }

        // Trim down to nearest word-ending

        text = TrimStartToWord(text);
        text = TrimEndToWord(text);

        return text;
    }
}


@model HolmesMVC.Models.ViewModels.CanonSearchView

@if (string.IsNullOrEmpty(Model.Query))
{
    ViewBag.Title = "Canon Search";

}
else
{

    if (Model.Query.IndexOf('"') > -1)
    {
        ViewBag.Title = "Canon Search for " + Model.Query;
    }
    else
    {
        ViewBag.Title = "Canon Search for '" + Model.Query + "'";
    }
}

<h2 class="detailscategory">@ViewBag.Title</h2>
<form action="/Canon/Search/">
    <input type="text" name="query" />
    <input type="submit" value="Search" />
</form>

@if (!string.IsNullOrEmpty(Model.Query))
{
    <br />

    HolmesMVC.Models.Story previousStory = null;

    foreach (var node in Model.Nodes.OrderBy(n => n.Story.Episodes.First().Airdate))
    {
        if (previousStory != null && node.Story.ID != previousStory.ID)
        {
    <text>-- </text>@Html.ActionLink(previousStory.Name, "Details", "Story", new { id = previousStory.ID }, null)<br />
    <br />
    <hr />
    <br />
        }

        int excerptBufferSize = 40;
        string excerptHighlightColour = "yellow";

        string highlightedSnippet;

        if (Model.Query.IndexOf('"') > -1)
        {
            highlightedSnippet = HighlightKeyWords(node.Snippet, Model.Query.Replace("\"", String.Empty), excerptHighlightColour);
        }
        else
        {
            highlightedSnippet = HighlightKeyWords(node.Snippet, Model.Query.Replace(' ', ','), excerptHighlightColour);
        }

        string excerptedSnippet = ExcerptText(highlightedSnippet, excerptBufferSize, excerptHighlightColour);
    
    @Html.Raw(excerptedSnippet)<br />
    <br />
    
        previousStory = node.Story;

    }
    if (previousStory != null)
    {
    <text>-- </text>@Html.ActionLink(previousStory.Name, "Details", "Story", new { id = previousStory.ID }, null)<br />
    <br />
    <br />
    }
}
