@using HolmesMVC
@using HolmesMVC.Models
@using HolmesMVC.Models.ViewModels
@model ScrapsView

@{
    ViewBag.Title = "Scraps";
}

    <h2>@ViewBag.Title</h2>

<h2>d3.js Force Directed</h2>
<!-- Credit to http://bl.ocks.org/mbostock/4062045 -->

<style>

.links line {
  stroke: #999;
  stroke-opacity: 0.6;
}

.nodes circle {
  stroke: #fff;
  stroke-width: 1.5px;
}

g.gnode {
    font-size: 8px;
    font-weight: 700;
}

</style>

<svg width="960" height="600"></svg>

@section Scripts {
    <script src="https://d3js.org/d3.v4.min.js"></script>
    
<script>
    $(document).ready(function () {

        var myJson = '@Html.Raw(Model.HolmesLinks)';

        var graph = JSON.parse(myJson);

        var svg = d3.select("svg"),
            width = +svg.attr("width"),
            height = +svg.attr("height");

        var color = d3.scaleOrdinal(d3.schemeCategory20);

        var simulation = d3.forceSimulation()
            .force("link", d3.forceLink().id(function (d) { return d.id; }))
            .force("charge", d3.forceManyBody())
            .force("center", d3.forceCenter(width / 2, height / 2));

        var drawGraph = function (graph) {

            var link = svg.append("g")
                .attr("class", "links")
              .selectAll("line")
              .data(graph.links)
              .enter().append("line")
                .attr("stroke-width", function (d) { return Math.sqrt(d.value); });

            var gnodes = svg.selectAll('g.gnode')
               .data(graph.nodes)
               .enter()
               .append('g')
               .classed('gnode', true);

            var node = gnodes.append("circle")
                .attr("class", "node")
                .attr("r", 10)
                .style("fill", function (d) { return color(d.group); })
            .call(d3.drag()
                .on("start", dragstarted)
                .on("drag", dragged)
                .on("end", dragended));

            var labels = gnodes.append("text")
                .text(function (d) { return d.name; });

            simulation
                .nodes(graph.nodes)
                .on("tick", ticked);

            simulation.force("link")
                .links(graph.links);

            function dragstarted(d) {
                if (!d3.event.active) simulation.alphaTarget(0.3).restart();
                d.fx = d.x;
                d.fy = d.y;
            }

            function dragged(d) {
                d.fx = d3.event.x;
                d.fy = d3.event.y;
            }

            function dragended(d) {
                if (!d3.event.active) simulation.alphaTarget(0);
                d.fx = null;
                d.fy = null;
            }

            function ticked() {
                link.attr("x1", function (d) { return d.source.x; })
                    .attr("y1", function (d) { return d.source.y; })
                    .attr("x2", function (d) { return d.target.x; })
                    .attr("y2", function (d) { return d.target.y; });

                gnodes.attr("transform", function (d) {
                    return 'translate(' + [d.x, d.y] + ')';
                });
            }
        };

        drawGraph(graph);
    });

</script>
}